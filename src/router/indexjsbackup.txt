import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'
import { auth } from '../firebase'




const routes = [
  {
    path: '/',
    name: 'home',
    component: HomeView,

    meta: {

      requiresAuth: true
    }
    
  },
  {
    path: '/about',
    name: 'about',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/AboutView.vue'),

    meta: {

      requiresAuth: true
    }

  },

  {
    path: '/login',
    name: 'Login' ,
    component: () => import(/* webpackChunkName: "about" */ '../views/LoginView.vue'),
    
  },
  {
    path: '/googlemap',
    name: 'Map',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/GoogleMap.vue'),

    meta: {

      requiresAuth: true
    }

  },
  {
    path: '/insert',
    name: 'Insert',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/AddTools.vue'),

    meta: {

      requiresAuth: true
    }

    

  },
  {
    path: '/edit/:id', // Dynamic segment for the document ID
    name: 'edit',
    component: () => import('@/views/EditScorecard.vue'),
    meta: {

      requiresAuth: true
    }
  },
  {
    path: '/hls',
    name: 'hls',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/HLS.vue'),

    meta: {

      requiresAuth: true
    }

    

  },

 
  
  
  



]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
})

router.beforeEach((to,from,next) => {
  if(to.path === '/login' && auth.currentUser){
    next('/')
    return;
  }

  if (to.matched.some(record => record.meta.requiresAuth0) && !auth.currentUser){
    next('/login')
    return;

  }
  next();

})

export default router
